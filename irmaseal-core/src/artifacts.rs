use crate::util::open_ct;
use serde::{Deserialize, Deserializer, Serialize, Serializer};

/// An IRMAseal public key for a system, as generated by the Private Key Generator (PKG).
pub struct PublicKey(pub(crate) ibe::kiltz_vahlis_one::PublicKey);

/// An IRMAseal user private key, as generated by the Private Key Generator (PKG).
pub struct UserSecretKey(pub(crate) ibe::kiltz_vahlis_one::UserSecretKey);

/// Serialize to a base64 encoded waters byte representation.
impl Serialize for PublicKey {
    fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
        serializer.serialize_str(&base64::encode(self.0.to_bytes().as_ref()))
    }
}

impl PublicKey {
    pub fn from_base64(s: &str) -> Option<Self> {
        let mut b = [0u8; 25056];
        base64::decode_config_slice(s, base64::STANDARD, &mut b).ok()?;
        let pk = open_ct(ibe::kiltz_vahlis_one::PublicKey::from_bytes(&b))?;
        Some(PublicKey(pk))
    }
}

/// Deserialize from a base64 encoded waters byte representation.
impl<'de> Deserialize<'de> for PublicKey {
    fn deserialize<D: Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
        let s = <&'de str>::deserialize(deserializer)?;

        PublicKey::from_base64(s).ok_or_else(|| serde::de::Error::custom("Not a waters public key"))
    }
}

/// Serialize to a base64 encoded waters byte representation.
impl Serialize for UserSecretKey {
    fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
        serializer.serialize_str(&base64::encode(self.0.to_bytes().as_ref()))
    }
}

/// Deserialize from a base64 encoded waters byte representation.
impl<'de> Deserialize<'de> for UserSecretKey {
    fn deserialize<D: Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
        let s = <&'de str>::deserialize(deserializer)?;
        let mut b = [0u8; 192];
        base64::decode_config_slice(s, base64::STANDARD, &mut b)
            .map_err(serde::de::Error::custom)?;
        let pk = open_ct(ibe::kiltz_vahlis_one::UserSecretKey::from_bytes(&b))
            .ok_or_else(|| serde::de::Error::custom("Not a waters user secret key"))?;
        Ok(UserSecretKey(pk))
    }
}

impl From<ibe::kiltz_vahlis_one::PublicKey> for PublicKey {
    fn from(pk: ibe::kiltz_vahlis_one::PublicKey) -> Self {
        Self(pk)
    }
}

impl From<ibe::kiltz_vahlis_one::UserSecretKey> for UserSecretKey {
    fn from(usk: ibe::kiltz_vahlis_one::UserSecretKey) -> Self {
        Self(usk)
    }
}
